{
  "version": 3,
  "sources": ["../../flowbite-react/lib/esm/components/Dropdown/DropdownItem.js", "../../flowbite-react/lib/esm/helpers/mergeDeep.js"],
  "sourcesContent": ["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport classNames from 'classnames';\nimport { mergeDeep } from '../../helpers/mergeDeep';\nimport { useTheme } from '../Flowbite/ThemeContext';\nexport const DropdownItem = ({ children, className, icon: Icon, onClick, theme: customTheme = {}, ...props }) => {\n    const theme = mergeDeep(useTheme().theme.dropdown.floating.item, customTheme);\n    return (_jsxs(\"li\", { className: classNames(theme.base, className), onClick: onClick, ...props, children: [Icon && _jsx(Icon, { className: theme.icon }), children] }));\n};\n", "/**\n * Check if provided parameter is plain object\n * @param item\n * @returns boolean\n */\nfunction isObject(item) {\n    return item !== null && typeof item === 'object' && item.constructor === Object;\n}\nfunction cloneDeep(source) {\n    if (!isObject(source)) {\n        return source;\n    }\n    const output = { ...source };\n    Object.keys(source).forEach((key) => {\n        output[key] = cloneDeep(source[key]);\n    });\n    return output;\n}\n/**\n * Merge and deep copy the values of all of the enumerable own properties of target object from source object to a new object\n * @param target The target object to get properties from.\n * @param source The source object from which to copy properties.\n * @return A new merged and deep copied object.\n */\nexport function mergeDeep(target, source) {\n    if (isObject(source) && Object.keys(source).length === 0) {\n        return cloneDeep({ ...target, ...source });\n    }\n    const output = { ...target, ...source };\n    if (isObject(source) && isObject(target)) {\n        Object.keys(source).forEach((key) => {\n            if (isObject(source[key]) && key in target && isObject(target[key])) {\n                output[key] = mergeDeep(target[key], source[key]);\n            }\n            else {\n                output[key] = isObject(source[key]) ? cloneDeep(source[key]) : source[key];\n            }\n        });\n    }\n    return output;\n}\n"],
  "mappings": ";;;;;;;;;;;;AAAA,yBAA2C;AAC3C,wBAAuB;;;ACIvB,SAAS,SAAS,MAAM;AACpB,SAAO,SAAS,QAAQ,OAAO,SAAS,YAAY,KAAK,gBAAgB;AAC7E;AACA,SAAS,UAAU,QAAQ;AACvB,MAAI,CAAC,SAAS,MAAM,GAAG;AACnB,WAAO;AAAA,EACX;AACA,QAAM,SAAS,EAAE,GAAG,OAAO;AAC3B,SAAO,KAAK,MAAM,EAAE,QAAQ,CAAC,QAAQ;AACjC,WAAO,GAAG,IAAI,UAAU,OAAO,GAAG,CAAC;AAAA,EACvC,CAAC;AACD,SAAO;AACX;AAOO,SAAS,UAAU,QAAQ,QAAQ;AACtC,MAAI,SAAS,MAAM,KAAK,OAAO,KAAK,MAAM,EAAE,WAAW,GAAG;AACtD,WAAO,UAAU,EAAE,GAAG,QAAQ,GAAG,OAAO,CAAC;AAAA,EAC7C;AACA,QAAM,SAAS,EAAE,GAAG,QAAQ,GAAG,OAAO;AACtC,MAAI,SAAS,MAAM,KAAK,SAAS,MAAM,GAAG;AACtC,WAAO,KAAK,MAAM,EAAE,QAAQ,CAAC,QAAQ;AACjC,UAAI,SAAS,OAAO,GAAG,CAAC,KAAK,OAAO,UAAU,SAAS,OAAO,GAAG,CAAC,GAAG;AACjE,eAAO,GAAG,IAAI,UAAU,OAAO,GAAG,GAAG,OAAO,GAAG,CAAC;AAAA,MACpD,OACK;AACD,eAAO,GAAG,IAAI,SAAS,OAAO,GAAG,CAAC,IAAI,UAAU,OAAO,GAAG,CAAC,IAAI,OAAO,GAAG;AAAA,MAC7E;AAAA,IACJ,CAAC;AAAA,EACL;AACA,SAAO;AACX;;;ADpCO,IAAM,eAAe,CAAC,EAAE,UAAU,WAAW,MAAM,MAAM,SAAS,OAAO,cAAc,CAAC,GAAG,GAAG,MAAM,MAAM;AAC7G,QAAM,QAAQ,UAAU,SAAS,EAAE,MAAM,SAAS,SAAS,MAAM,WAAW;AAC5E,aAAQ,mBAAAA,MAAM,MAAM,EAAE,eAAW,kBAAAC,SAAW,MAAM,MAAM,SAAS,GAAG,SAAkB,GAAG,OAAO,UAAU,CAAC,YAAQ,mBAAAC,KAAK,MAAM,EAAE,WAAW,MAAM,KAAK,CAAC,GAAG,QAAQ,EAAE,CAAC;AACzK;",
  "names": ["_jsxs", "classNames", "_jsx"]
}
